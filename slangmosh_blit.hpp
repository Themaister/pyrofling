// Autogenerated from slangmosh, do not edit.
#ifndef SLANGMOSH_GENERATED_Blitiface_H
#define SLANGMOSH_GENERATED_Blitiface_H
#include <stdint.h>
namespace Vulkan
{
class Program;
class Shader;
}

namespace Blit
{
template <typename Program = Vulkan::Program *, typename Shader = Vulkan::Shader *>
struct Shaders
{
	Shader quad = {};
	Shader blit = {};
	Shaders() = default;

	template <typename Device, typename Layout, typename Resolver>
	Shaders(Device &device, Layout &layout, const Resolver &resolver);
};
}
#endif
// Autogenerated from slangmosh, do not edit.
#ifndef SLANGMOSH_GENERATED_BlitH
#define SLANGMOSH_GENERATED_BlitH
#include <stdint.h>
namespace Vulkan
{
class Program;
class Shader;
}

namespace Blit
{
static const uint32_t spirv_bank[] =
{
	0x07230203u, 0x00010300u, 0x000d000bu, 0x00000034u, 0x00000000u, 0x00020011u, 0x00000001u, 0x0006000bu,
	0x00000001u, 0x4c534c47u, 0x6474732eu, 0x3035342eu, 0x00000000u, 0x0003000eu, 0x00000000u, 0x00000001u,
	0x0008000fu, 0x00000000u, 0x00000004u, 0x6e69616du, 0x00000000u, 0x00000008u, 0x00000016u, 0x0000002bu,
	0x00040047u, 0x00000008u, 0x0000000bu, 0x0000002au, 0x00050048u, 0x00000014u, 0x00000000u, 0x0000000bu,
	0x00000000u, 0x00050048u, 0x00000014u, 0x00000001u, 0x0000000bu, 0x00000001u, 0x00050048u, 0x00000014u,
	0x00000002u, 0x0000000bu, 0x00000003u, 0x00050048u, 0x00000014u, 0x00000003u, 0x0000000bu, 0x00000004u,
	0x00030047u, 0x00000014u, 0x00000002u, 0x00040047u, 0x0000002bu, 0x0000001eu, 0x00000000u, 0x00020013u,
	0x00000002u, 0x00030021u, 0x00000003u, 0x00000002u, 0x00040015u, 0x00000006u, 0x00000020u, 0x00000001u,
	0x00040020u, 0x00000007u, 0x00000001u, 0x00000006u, 0x0004003bu, 0x00000007u, 0x00000008u, 0x00000001u,
	0x0004002bu, 0x00000006u, 0x0000000au, 0x00000000u, 0x00020014u, 0x0000000bu, 0x00030016u, 0x0000000fu,
	0x00000020u, 0x00040017u, 0x00000010u, 0x0000000fu, 0x00000004u, 0x00040015u, 0x00000011u, 0x00000020u,
	0x00000000u, 0x0004002bu, 0x00000011u, 0x00000012u, 0x00000001u, 0x0004001cu, 0x00000013u, 0x0000000fu,
	0x00000012u, 0x0006001eu, 0x00000014u, 0x00000010u, 0x0000000fu, 0x00000013u, 0x00000013u, 0x00040020u,
	0x00000015u, 0x00000003u, 0x00000014u, 0x0004003bu, 0x00000015u, 0x00000016u, 0x00000003u, 0x0004002bu,
	0x0000000fu, 0x00000017u, 0xbf800000u, 0x0004002bu, 0x0000000fu, 0x00000018u, 0x00000000u, 0x0004002bu,
	0x0000000fu, 0x00000019u, 0x3f800000u, 0x0007002cu, 0x00000010u, 0x0000001au, 0x00000017u, 0x00000017u,
	0x00000018u, 0x00000019u, 0x00040020u, 0x0000001bu, 0x00000003u, 0x00000010u, 0x0004002bu, 0x00000006u,
	0x0000001fu, 0x00000001u, 0x0004002bu, 0x0000000fu, 0x00000023u, 0x40400000u, 0x0007002cu, 0x00000010u,
	0x00000024u, 0x00000023u, 0x00000017u, 0x00000018u, 0x00000019u, 0x0007002cu, 0x00000010u, 0x00000027u,
	0x00000017u, 0x00000023u, 0x00000018u, 0x00000019u, 0x00040017u, 0x00000029u, 0x0000000fu, 0x00000002u,
	0x00040020u, 0x0000002au, 0x00000003u, 0x00000029u, 0x0004003bu, 0x0000002au, 0x0000002bu, 0x00000003u,
	0x0004002bu, 0x0000000fu, 0x0000002cu, 0x3f000000u, 0x0005002cu, 0x00000029u, 0x00000033u, 0x0000002cu,
	0x0000002cu, 0x00050036u, 0x00000002u, 0x00000004u, 0x00000000u, 0x00000003u, 0x000200f8u, 0x00000005u,
	0x0004003du, 0x00000006u, 0x00000009u, 0x00000008u, 0x000500aau, 0x0000000bu, 0x0000000cu, 0x00000009u,
	0x0000000au, 0x000300f7u, 0x0000000eu, 0x00000000u, 0x000400fau, 0x0000000cu, 0x0000000du, 0x0000001du,
	0x000200f8u, 0x0000000du, 0x00050041u, 0x0000001bu, 0x0000001cu, 0x00000016u, 0x0000000au, 0x0003003eu,
	0x0000001cu, 0x0000001au, 0x000200f9u, 0x0000000eu, 0x000200f8u, 0x0000001du, 0x000500aau, 0x0000000bu,
	0x00000020u, 0x00000009u, 0x0000001fu, 0x000300f7u, 0x00000022u, 0x00000000u, 0x000400fau, 0x00000020u,
	0x00000021u, 0x00000026u, 0x000200f8u, 0x00000021u, 0x00050041u, 0x0000001bu, 0x00000025u, 0x00000016u,
	0x0000000au, 0x0003003eu, 0x00000025u, 0x00000024u, 0x000200f9u, 0x00000022u, 0x000200f8u, 0x00000026u,
	0x00050041u, 0x0000001bu, 0x00000028u, 0x00000016u, 0x0000000au, 0x0003003eu, 0x00000028u, 0x00000027u,
	0x000200f9u, 0x00000022u, 0x000200f8u, 0x00000022u, 0x000200f9u, 0x0000000eu, 0x000200f8u, 0x0000000eu,
	0x00050041u, 0x0000001bu, 0x0000002du, 0x00000016u, 0x0000000au, 0x0004003du, 0x00000010u, 0x0000002eu,
	0x0000002du, 0x0007004fu, 0x00000029u, 0x0000002fu, 0x0000002eu, 0x0000002eu, 0x00000000u, 0x00000001u,
	0x0005008eu, 0x00000029u, 0x00000030u, 0x0000002fu, 0x0000002cu, 0x00050081u, 0x00000029u, 0x00000032u,
	0x00000030u, 0x00000033u, 0x0003003eu, 0x0000002bu, 0x00000032u, 0x000100fdu, 0x00010038u, 0x07230203u,
	0x00010300u, 0x000d000bu, 0x00000015u, 0x00000000u, 0x00020011u, 0x00000001u, 0x0006000bu, 0x00000001u,
	0x4c534c47u, 0x6474732eu, 0x3035342eu, 0x00000000u, 0x0003000eu, 0x00000000u, 0x00000001u, 0x0007000fu,
	0x00000004u, 0x00000004u, 0x6e69616du, 0x00000000u, 0x00000009u, 0x00000011u, 0x00030010u, 0x00000004u,
	0x00000007u, 0x00040047u, 0x00000009u, 0x0000001eu, 0x00000000u, 0x00040047u, 0x0000000du, 0x00000022u,
	0x00000000u, 0x00040047u, 0x0000000du, 0x00000021u, 0x00000000u, 0x00040047u, 0x00000011u, 0x0000001eu,
	0x00000000u, 0x00020013u, 0x00000002u, 0x00030021u, 0x00000003u, 0x00000002u, 0x00030016u, 0x00000006u,
	0x00000020u, 0x00040017u, 0x00000007u, 0x00000006u, 0x00000004u, 0x00040020u, 0x00000008u, 0x00000003u,
	0x00000007u, 0x0004003bu, 0x00000008u, 0x00000009u, 0x00000003u, 0x00090019u, 0x0000000au, 0x00000006u,
	0x00000001u, 0x00000000u, 0x00000000u, 0x00000000u, 0x00000001u, 0x00000000u, 0x0003001bu, 0x0000000bu,
	0x0000000au, 0x00040020u, 0x0000000cu, 0x00000000u, 0x0000000bu, 0x0004003bu, 0x0000000cu, 0x0000000du,
	0x00000000u, 0x00040017u, 0x0000000fu, 0x00000006u, 0x00000002u, 0x00040020u, 0x00000010u, 0x00000001u,
	0x0000000fu, 0x0004003bu, 0x00000010u, 0x00000011u, 0x00000001u, 0x0004002bu, 0x00000006u, 0x00000013u,
	0x00000000u, 0x00050036u, 0x00000002u, 0x00000004u, 0x00000000u, 0x00000003u, 0x000200f8u, 0x00000005u,
	0x0004003du, 0x0000000bu, 0x0000000eu, 0x0000000du, 0x0004003du, 0x0000000fu, 0x00000012u, 0x00000011u,
	0x00070058u, 0x00000007u, 0x00000014u, 0x0000000eu, 0x00000012u, 0x00000002u, 0x00000013u, 0x0003003eu,
	0x00000009u, 0x00000014u, 0x000100fdu, 0x00010038u,
};

static const uint8_t reflection_bank[] =
{
	0x47, 0x00, 0x52, 0x00, 0x41, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x47, 0x00, 0x52, 0x00,
	0x41, 0x00, 0x04, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
};

template <typename Program, typename Shader>
template <typename Device, typename Layout, typename Resolver>
Shaders<Program, Shader>::Shaders(Device &device, Layout &layout, const Resolver &resolver)
{
	layout.unserialize(reflection_bank + 0, 348);
	this->quad = device.request_shader(spirv_bank + 0, 1148, &layout);
	layout.unserialize(reflection_bank + 348, 348);
	this->blit = device.request_shader(spirv_bank + 287, 500, &layout);
}
}
#endif
